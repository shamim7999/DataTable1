

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace MyDataTableApp.Db
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class MyEmployeeDBEntities : DbContext
{
    public MyEmployeeDBEntities()
        : base("name=MyEmployeeDBEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Employee> Employee { get; set; }


    public virtual int spGetEmployees(string searchValue, string name, string position, string office, Nullable<int> id, Nullable<int> age, Nullable<int> salary, string sortColumnName, string sortDirection, Nullable<int> start, Nullable<int> length)
    {

        var searchValueParameter = searchValue != null ?
            new ObjectParameter("searchValue", searchValue) :
            new ObjectParameter("searchValue", typeof(string));


        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        var positionParameter = position != null ?
            new ObjectParameter("position", position) :
            new ObjectParameter("position", typeof(string));


        var officeParameter = office != null ?
            new ObjectParameter("office", office) :
            new ObjectParameter("office", typeof(string));


        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(int));


        var ageParameter = age.HasValue ?
            new ObjectParameter("age", age) :
            new ObjectParameter("age", typeof(int));


        var salaryParameter = salary.HasValue ?
            new ObjectParameter("salary", salary) :
            new ObjectParameter("salary", typeof(int));


        var sortColumnNameParameter = sortColumnName != null ?
            new ObjectParameter("sortColumnName", sortColumnName) :
            new ObjectParameter("sortColumnName", typeof(string));


        var sortDirectionParameter = sortDirection != null ?
            new ObjectParameter("sortDirection", sortDirection) :
            new ObjectParameter("sortDirection", typeof(string));


        var startParameter = start.HasValue ?
            new ObjectParameter("start", start) :
            new ObjectParameter("start", typeof(int));


        var lengthParameter = length.HasValue ?
            new ObjectParameter("length", length) :
            new ObjectParameter("length", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmployees", searchValueParameter, nameParameter, positionParameter, officeParameter, idParameter, ageParameter, salaryParameter, sortColumnNameParameter, sortDirectionParameter, startParameter, lengthParameter);
    }


    public virtual int addNewEmployee(string name, string position, string office, Nullable<int> age, Nullable<int> salary)
    {

        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        var positionParameter = position != null ?
            new ObjectParameter("position", position) :
            new ObjectParameter("position", typeof(string));


        var officeParameter = office != null ?
            new ObjectParameter("office", office) :
            new ObjectParameter("office", typeof(string));


        var ageParameter = age.HasValue ?
            new ObjectParameter("age", age) :
            new ObjectParameter("age", typeof(int));


        var salaryParameter = salary.HasValue ?
            new ObjectParameter("salary", salary) :
            new ObjectParameter("salary", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addNewEmployee", nameParameter, positionParameter, officeParameter, ageParameter, salaryParameter);
    }


    public virtual ObjectResult<spGetEmployees1_Result> spGetEmployees1(string searchValue, string name, string position, string office, Nullable<int> id, Nullable<int> age, Nullable<int> salary, string sortColumnName, string sortDirection, Nullable<int> start, Nullable<int> length)
    {

        var searchValueParameter = searchValue != null ?
            new ObjectParameter("searchValue", searchValue) :
            new ObjectParameter("searchValue", typeof(string));


        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        var positionParameter = position != null ?
            new ObjectParameter("position", position) :
            new ObjectParameter("position", typeof(string));


        var officeParameter = office != null ?
            new ObjectParameter("office", office) :
            new ObjectParameter("office", typeof(string));


        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(int));


        var ageParameter = age.HasValue ?
            new ObjectParameter("age", age) :
            new ObjectParameter("age", typeof(int));


        var salaryParameter = salary.HasValue ?
            new ObjectParameter("salary", salary) :
            new ObjectParameter("salary", typeof(int));


        var sortColumnNameParameter = sortColumnName != null ?
            new ObjectParameter("sortColumnName", sortColumnName) :
            new ObjectParameter("sortColumnName", typeof(string));


        var sortDirectionParameter = sortDirection != null ?
            new ObjectParameter("sortDirection", sortDirection) :
            new ObjectParameter("sortDirection", typeof(string));


        var startParameter = start.HasValue ?
            new ObjectParameter("start", start) :
            new ObjectParameter("start", typeof(int));


        var lengthParameter = length.HasValue ?
            new ObjectParameter("length", length) :
            new ObjectParameter("length", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployees1_Result>("spGetEmployees1", searchValueParameter, nameParameter, positionParameter, officeParameter, idParameter, ageParameter, salaryParameter, sortColumnNameParameter, sortDirectionParameter, startParameter, lengthParameter);
    }

}

}

