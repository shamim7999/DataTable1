

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace MyDataTableApp.Db
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;
    using MyDataTableApp.Helper;


public partial class MyEmployeeDBEntities : DbContext
{
    public MyEmployeeDBEntities()
        : base("name=MyEmployeeDBEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
            modelBuilder.Entity<Employee>()
                    .Ignore(i => i.TotalCount);
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Employee> Employee { get; set; }


    public virtual int spGetEmployees(string searchValue, string name, string position, string office, Nullable<int> id, Nullable<int> age, Nullable<int> salary, string sortColumnName, string sortDirection, Nullable<int> start, Nullable<int> length)
    {

        var searchValueParameter = searchValue != null ?
            new ObjectParameter("searchValue", searchValue) :
            new ObjectParameter("searchValue", typeof(string));


        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        var positionParameter = position != null ?
            new ObjectParameter("position", position) :
            new ObjectParameter("position", typeof(string));


        var officeParameter = office != null ?
            new ObjectParameter("office", office) :
            new ObjectParameter("office", typeof(string));


        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(int));


        var ageParameter = age.HasValue ?
            new ObjectParameter("age", age) :
            new ObjectParameter("age", typeof(int));


        var salaryParameter = salary.HasValue ?
            new ObjectParameter("salary", salary) :
            new ObjectParameter("salary", typeof(int));


        var sortColumnNameParameter = sortColumnName != null ?
            new ObjectParameter("sortColumnName", sortColumnName) :
            new ObjectParameter("sortColumnName", typeof(string));


        var sortDirectionParameter = sortDirection != null ?
            new ObjectParameter("sortDirection", sortDirection) :
            new ObjectParameter("sortDirection", typeof(string));


        var startParameter = start.HasValue ?
            new ObjectParameter("start", start) :
            new ObjectParameter("start", typeof(int));


        var lengthParameter = length.HasValue ?
            new ObjectParameter("length", length) :
            new ObjectParameter("length", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmployees", searchValueParameter, nameParameter, positionParameter, officeParameter, idParameter, ageParameter, salaryParameter, sortColumnNameParameter, sortDirectionParameter, startParameter, lengthParameter);
    }


    public virtual ObjectResult<GetEmployees_Result> GetEmployees(FilterParameters parameters)
    {

            var searchValueParameter = parameters.search.value != null ?
                   new ObjectParameter("searchValue", parameters.search.value) :
                   new ObjectParameter("searchValue", typeof(string));


            var nameParameter = parameters.name != null ?
                new ObjectParameter("name", parameters.name) :
                new ObjectParameter("name", typeof(string));


            var positionParameter = parameters.position != null ?
                new ObjectParameter("position", parameters.position) :
                new ObjectParameter("position", typeof(string));


            var officeParameter = parameters.office != null ?
                new ObjectParameter("office", parameters.office) :
                new ObjectParameter("office", typeof(string));


            var idParameter = parameters.id.HasValue ?
                new ObjectParameter("id", parameters.id) :
                new ObjectParameter("id", typeof(int));


            var ageParameter = parameters.age.HasValue ?
                new ObjectParameter("age", parameters.age) :
                new ObjectParameter("age", typeof(int));


            var salaryParameter = parameters.salary.HasValue ?
                new ObjectParameter("salary", parameters.salary) :
                new ObjectParameter("salary", typeof(int));


            var sortColumnNameParameter = parameters.order != null && parameters.order[0].name != null ?
                new ObjectParameter("sortColumnName", parameters.order[0].name.Trim()) :
                new ObjectParameter("sortColumnName", typeof(string));

            var sortDirectionParameter = parameters.order != null && parameters.order[0].dir != null ?
                new ObjectParameter("sortDirection", parameters.order[0].dir) :
                new ObjectParameter("sortDirection", typeof(string));


            var startParameter = parameters.start >= 0 ?
                new ObjectParameter("start", parameters.start) :
                new ObjectParameter("start", typeof(int));


            var lengthParameter = parameters.length > 0 ?
                new ObjectParameter("length", parameters.length) :
                new ObjectParameter("length", typeof(int));


            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployees_Result>("GetEmployees", searchValueParameter, nameParameter, positionParameter, officeParameter, idParameter, ageParameter, salaryParameter, sortColumnNameParameter, sortDirectionParameter, startParameter, lengthParameter);
    }


    public virtual ObjectResult<Employee> GetAllEmployees(FilterParameters parameters)
    {

            var searchValueParameter = parameters.search.value != null ?
                new ObjectParameter("searchValue", parameters.search.value) :
                new ObjectParameter("searchValue", typeof(string));


            var nameParameter = parameters.name != null ?
                new ObjectParameter("name", parameters.name) :
                new ObjectParameter("name", typeof(string));


            var positionParameter = parameters.position != null ?
                new ObjectParameter("position", parameters.position) :
                new ObjectParameter("position", typeof(string));


            var officeParameter = parameters.office != null ?
                new ObjectParameter("office", parameters.office) :
                new ObjectParameter("office", typeof(string));


            var idParameter = parameters.id.HasValue ?
                new ObjectParameter("id", parameters.id) :
                new ObjectParameter("id", typeof(int));


            var ageParameter = parameters.age.HasValue ?
                new ObjectParameter("age", parameters.age) :
                new ObjectParameter("age", typeof(int));


            var salaryParameter = parameters.salary.HasValue ?
                new ObjectParameter("salary", parameters.salary) :
                new ObjectParameter("salary", typeof(int));


            var sortColumnNameParameter = parameters.order != null && parameters.order[0].name != null ?
                new ObjectParameter("sortColumnName", parameters.order[0].name.Trim()) :
                new ObjectParameter("sortColumnName", typeof(string));

            var sortDirectionParameter = parameters.order != null && parameters.order[0].dir != null ?
                new ObjectParameter("sortDirection", parameters.order[0].dir) :
                new ObjectParameter("sortDirection", typeof(string));


            var startParameter = parameters.start >= 0 ?
                new ObjectParameter("start", parameters.start) :
                new ObjectParameter("start", typeof(int));


            var lengthParameter = parameters.length > 0 ?
                new ObjectParameter("length", parameters.length) :
                new ObjectParameter("length", typeof(int));



            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("GetAllEmployees", searchValueParameter, nameParameter, positionParameter, officeParameter, idParameter, ageParameter, salaryParameter, sortColumnNameParameter, sortDirectionParameter, startParameter, lengthParameter);
    }


    public virtual ObjectResult<Employee> GetAllEmployees(string searchValue, string name, string position, string office, Nullable<int> id, Nullable<int> age, Nullable<int> salary, string sortColumnName, string sortDirection, Nullable<int> start, Nullable<int> length, MergeOption mergeOption)
    {

        var searchValueParameter = searchValue != null ?
            new ObjectParameter("searchValue", searchValue) :
            new ObjectParameter("searchValue", typeof(string));


        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        var positionParameter = position != null ?
            new ObjectParameter("position", position) :
            new ObjectParameter("position", typeof(string));


        var officeParameter = office != null ?
            new ObjectParameter("office", office) :
            new ObjectParameter("office", typeof(string));


        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(int));


        var ageParameter = age.HasValue ?
            new ObjectParameter("age", age) :
            new ObjectParameter("age", typeof(int));


        var salaryParameter = salary.HasValue ?
            new ObjectParameter("salary", salary) :
            new ObjectParameter("salary", typeof(int));


        var sortColumnNameParameter = sortColumnName != null ?
            new ObjectParameter("sortColumnName", sortColumnName) :
            new ObjectParameter("sortColumnName", typeof(string));


        var sortDirectionParameter = sortDirection != null ?
            new ObjectParameter("sortDirection", sortDirection) :
            new ObjectParameter("sortDirection", typeof(string));


        var startParameter = start.HasValue ?
            new ObjectParameter("start", start) :
            new ObjectParameter("start", typeof(int));


        var lengthParameter = length.HasValue ?
            new ObjectParameter("length", length) :
            new ObjectParameter("length", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("GetAllEmployees", mergeOption, searchValueParameter, nameParameter, positionParameter, officeParameter, idParameter, ageParameter, salaryParameter, sortColumnNameParameter, sortDirectionParameter, startParameter, lengthParameter);
    }

}

}

